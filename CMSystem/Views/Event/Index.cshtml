@model CMSystem.Models.Event

@{
    ViewBag.Title = "Index";
}
@Styles.Render("~/Content/fullcalendar")

<div id='calendar'>
    <div id="tableDivEvent"></div>

    <div id="eventCreateForm">

        @using (Ajax.BeginForm("AJAXCreate", "Event", new AjaxOptions
        {
            InsertionMode = InsertionMode.Replace,
            HttpMethod = "POST",
            OnSuccess = "$('#calendar').fullCalendar('refetchEvents');"
            //UpdateTargetId = "tableDivEvent"
        }))

        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <h4>Event</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EventDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EventDescription, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EventDescription, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", type = "datetime-picker" } })
                        @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control", type = "datetime-picker" } })
                        @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Deadline, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Deadline, new { htmlAttributes = new { @class = "form-control", type = "datetime-picker" } })
                        @Html.ValidationMessageFor(model => model.Deadline, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Capacity, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Capacity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Capacity, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                        @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default createButton" />
                    </div>
                </div>
            </div>

        }
    </div>
</div>

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div id="partialView"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="newSignUp">Sign up</button>
                <a href="#" id="deletePopover" data-toggle="popover" title="Delete this events?" data-trigger="focus" data-content="<button class='btn btn-sm btn-info deleteButton'>Yes</button><button class='btn btn-sm btn-info CloseButton pull-right'>No</button>" data-html="true" data-placement="auto right">Delete</a>
            </div>
        </div>
    </div>
</div>



@section Scripts{
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/fullcalendar")

    <script>
        $(function () {
            $('input[type="datetime-picker"]').datetimepicker();

            $.ajax({
                url: '/Event/BuildEventTable',
                success: function (res) {
                    // $("#tableDivEvent").html(res);
                }
            });
            //$('#calendar').fullCalendar('updateEvents', events);

            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay,listWeek'
                },
                editable: true,
                eventLimit: true, // allow "more" link when too many events
                navLinks: true,
                selectable: true,
                selectHelper: true,
                editable: true,
                eventClick: function (event, element) {
                    var eventId = event.id;
                    var data = { eventId: eventId, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() };
                    $.ajax({
                        type: "POST",
                        url: '/Event/GetOneEvent',
                        data: data,
                        success: function (res) {
                            $("#partialView").html(res);
                            $('#myModal').modal('show');
                        }
                    });

                    $('#myModal').on("click", "#newSignUp", function () {
                        $.ajax({
                            type: "POST",
                            url: '/Event/AJAXCreateSignUp',
                            data: data,
                            success: function (abc) {
                                $("#partialView").html(abc);
                                $('#myModal').modal('show');
                            }
                        })
                    });


                    $('[data-toggle="popover"]').popover();
                    $('#deletePopover').click(function () {
                        alert(eventId);
                        $(".deleteButton").click(function () {
                            $.ajax({
                                type: "POST",
                                url: '/Event/AJAXDeleteConfirmed',
                                data: data,
                                success: function () {
                                    console.log("success");
                                    $('#calendar').fullCalendar('removeEvents', eventId);
                                    $('#myModal').modal('hide');
                                    $("[data-toggle='popover']").popover('destroy');
                                }
                            });
                            //$(this).attr('myid') get announcement ID
                        });
                        $(".CloseButton").click(function () {
                            $(this).popover('destroy');
                        })
                    });

                },


                events: function (start, end, timezone, callback) {
                    $.ajax({
                        url: '/Event/GetEventJSON',
                        success: function (responseText) {
                            var eventArray = [];
                            responseText.forEach(function (element) {
                                var obj = new Object();
                                obj.id = element.EventId;
                                obj.title = element.EventName;
                                obj.start = moment(element.StartTime);
                                obj.end = moment(element.EndTime);
                                eventArray.push(obj);
                            });
                            callback(eventArray);
                        }
                    });

                },
            });

        });
    </script>

}