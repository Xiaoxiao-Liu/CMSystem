@model CMSystem.Models.Event

@{
    ViewBag.Title = "Index";
}
@Styles.Render("~/Content/fullcalendar")

<div id='calendar'></div>
<div id="tableDivEvent"></div>

<div id="eventCreateForm">
    @using (Ajax.BeginForm("AJAXCreate", "Event", new AjaxOptions
    {
        InsertionMode = InsertionMode.Replace,
        HttpMethod = "POST",
        UpdateTargetId = "tableDivEvent"
    }))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <h4>Event</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EventDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EventDescription, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EventDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", type = "datetime-picker" } })
                    @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control", type = "datetime-picker" } })
                    @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreationTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreationTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreationTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Deadline, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Deadline, new { htmlAttributes = new { @class = "form-control", type = "datetime-picker" } })
                    @Html.ValidationMessageFor(model => model.Deadline, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Capacity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Capacity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Capacity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>

    }

</div>

@section Scripts{
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/fullcalendar")

    <script>
        $(function () {
            $('input[type="datetime-picker"]').datetimepicker();

            $.ajax({
                url: '/Event/BuildEventTable',
                success: function (res) {
                    $("#tableDivEvent").html(res);
                }
            });
         

            $('#calendar').fullCalendar({
                                     
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay,listWeek'
                },
                editable: true,
                eventLimit: true, // allow "more" link when too many events
                navLinks: true,
                selectable: true,
                selectHelper: true,
                editable: true,
                eventClick: function(event, element) {
                    var eventId = event.id;
                    console.log(eventId);
                    var data = { eventId: eventId, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() };
                    $.ajax({
                        type: "POST",
                        url: '/Event/GetEventJSON',
                        data: data,
                        success: function (res) {
                            alert('a day has been clicked!');
                        }
                    })
                },
                events: function (start, end, timezone, callback) {
                    $.ajax({
                        url: '/Event/GetEventJSON',
                        success: function (responseText) {
                            var eventArray = [];
                            responseText.forEach(function (element) {
                                var obj = new Object();
                                obj.id = element.EventId;
                                obj.title = element.EventName;
                                obj.start = moment(element.StartTime);
                                obj.end = moment(element.EndTime);
                                eventArray.push(obj);
                            });
                            callback(eventArray);
                        }
                    });
                },

                dayClick:function (){
                    alert('a day has been clicked!');
                    
                },




                eventClick: function (calEvent, jsEvent, view) {
               
                 
                    alert('Event: ' + calEvent.id);
                    alert('Coordinates: ' + jsEvent.pageX + ',' + jsEvent.pageY);
                    alert('View: ' + view.name);
                    confirm('View: ' + jsEvent.target);
                   
                    // change the border color just for fun
                    $(this).css('border-color', 'red');
                   

                },

            });
        })
    </script>

}